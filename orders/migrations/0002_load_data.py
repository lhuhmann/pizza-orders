# Generated by Django 3.1.7 on 2021-04-01 17:59
import csv
from django.db import migrations
from orders.models import ToppingType, Topping, Item, ItemTypeTopping, ToppingEnum

def load_topping_types(apps, schema_editor):
    '''Add topping types to the ToppingType table

    Returns:
        None
    '''
    # since migrations will be run from the directory containing manage.py,
    # the paths to the csv's should be relative to that directory
    topping_type_map = {}
    with open("orders/menu_data/ToppingType.csv") as topping_types:
        reader = csv.reader(topping_types)
        # skip the first row, which has the column names
        next(reader)
        for topping_type, topping_num in reader:
            t = ToppingType(topping_type = topping_type, topping_num = topping_num)
            # topping_type = apps.get_model("orders", "ToppingType")
            # topping_type.topping_type = topping_type
            # topping_type.topping_num = topping_num
            t.save()
            topping_type_map[topping_type] = t
    return topping_type_map

# optional; used for rolling back migrations
def delete_topping_types(apps, schema_editor):
    topping_type = apps.get_model("orders", "ToppingType")
    topping_type.objects.all().delete()

def load_toppings(apps, schema_editor):
    '''Add toppings to the Topping table

    Returns:
        None
    '''
    with open("orders/menu_data/Topping.csv") as toppings:
        reader = csv.reader(toppings)
        # skip the first row, which has the column names
        next(reader)
        topping_map = {}
        for (topping,) in reader:
            t = Topping(topping = topping)
            # topping = apps.get_model("orders", "Topping")
            # topping.topping = topping
            t.save()
            topping_map[topping] = t
    return topping_map

# optional; used for rolling back migrations
def delete_toppings(apps, schema_editor):
    topping = apps.get_model("orders", "Topping")
    topping.objects.all().delete()

def load_items(apps, schema_editor, topping_type_map):
    '''Add items to the Item table

    Returns:
        None
    '''
    with open("orders/menu_data/Item.csv") as items:
        reader = csv.reader(items)
        # skip the first row, which has the column names
        next(reader)
        for item_type, menu, topping_type, size, price in reader:
            if topping_type == "":
                topping_type = None
            elif topping_type in topping_type_map:
                topping_type = topping_type_map[topping_type]
            else:
                raise Exception(f"Topping type {topping_type} is not recognized")
            i = Item(item_type = item_type, menu = menu, topping_type = topping_type, size = size, price = price)
            # item = apps.get_model("orders", "Item")
            # item.item_type = item_type
            # item.menu = menu
            # item.topping_type = topping_type
            # item.size = size
            # item.price = price
            i.save()

# optional; used for rolling back migrations
def delete_items(apps, schema_editor):
    item = apps.get_model("orders", "Item")
    item.objects.all().delete()

def load_item_type_toppings(apps, schema_editor, topping_map):
    '''Add item type-topping paris to the ItemTypeTopping table

    Returns:
        None
    '''
    with open("orders/menu_data/ItemTypeTopping.csv") as pairs:
        reader = csv.reader(pairs)
        # skip the first row, which has the column names
        next(reader)
        for item_type, topping, price in reader:
            print(topping)
            topping = topping_map[topping]
            itt = ItemTypeTopping(item_type = item_type, topping = topping, price = price)
            # pair = apps.get_model("orders", "ItemTypeTopping")
            # pair.item_type = item_type
            # pair.topping = topping
            # pair.price = price
            itt.save()

# optional; used for rolling back migrations
def delete_item_type_toppings(apps, schema_editor):
    pairs = apps.get_model("orders", "ItemTypeTopping")
    pairs.objects.all().delete()

def load_all_menu_data(apps, schema_editor):
    topping_type_map = load_topping_types(apps, schema_editor)
    topping_map = load_toppings(apps, schema_editor)
    load_items(apps, schema_editor, topping_type_map)
    load_item_type_toppings(apps, schema_editor, topping_map)

def delete_all_menu_data(apps, schema_editor):
    delete_topping_types(apps, schema_editor)
    delete_toppings(apps, schema_editor)
    delete_items(apps, schema_editor)
    delete_item_type_toppings(apps, schema_editor)

class Migration(migrations.Migration):
    dependencies = [
        ('orders', '0001_create_db'),
    ]

    operations = [
        migrations.RunPython(load_all_menu_data, delete_all_menu_data)
    ]
